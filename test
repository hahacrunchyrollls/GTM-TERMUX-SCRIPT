#!/bin/bash
# Enhanced DNS Management and Monitoring Script
# Version 2.0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Global variables
VER="2.0"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.dns_monitor_config"

# Function to draw box
draw_box() {
    local text="$1"
    local width=$((${#text} + 4))
    
    echo -e "${BLUE}╔$(printf '═%.0s' $(seq 1 $width))╗${NC}"
    echo -e "${BLUE}║${NC} ${WHITE}$text${NC} ${BLUE}║${NC}"
    echo -e "${BLUE}╚$(printf '═%.0s' $(seq 1 $width))╝${NC}"
}

# Function to show banner
show_banner() {
    clear
    echo
    echo -e "${BLUE}╔════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}        DNS Management & Monitoring Tool         ${BLUE}║${NC}"
    echo -e "${BLUE}║${CYAN}                 Version: ${VER}                    ${BLUE}║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════════════╝${NC}"
    echo
}

# Function to save configuration
save_config() {
    echo "NS=${NS[*]}" > "$CONFIG_FILE"
    echo "HOSTS=${HOSTS[*]}" >> "$CONFIG_FILE"
    echo "LOOP_DELAY=$LOOP_DELAY" >> "$CONFIG_FILE"
}

# Function to load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        IFS=' ' read -ra NS <<< "$NS"
        IFS=' ' read -ra HOSTS <<< "$HOSTS"
        return 0
    fi
    return 1
}

# Function to manage nameservers
manage_nameservers() {
    local choice
    while true; do
        show_banner
        echo -e "${CYAN}Current Nameservers:${NC}"
        if [ ${#NS[@]} -eq 0 ]; then
            echo -e "${YELLOW}No nameservers configured${NC}"
        else
            for i in "${!NS[@]}"; do
                echo -e "${WHITE}$((i+1)). ${NC}${NS[$i]}"
            done
        fi
        echo
        echo -e "1. ${GREEN}Add${NC} nameserver"
        echo -e "2. ${RED}Remove${NC} nameserver"
        echo -e "3. ${BLUE}Back${NC} to main menu"
        echo
        read -p "Enter your choice (1-3): " choice

        case $choice in
            1)
                read -p "Enter new nameserver: " new_ns
                if [[ ! " ${NS[@]} " =~ " ${new_ns} " ]]; then
                    NS+=("$new_ns")
                    save_config
                    echo -e "${GREEN}Nameserver added successfully!${NC}"
                else
                    echo -e "${RED}Nameserver already exists!${NC}"
                fi
                sleep 1
                ;;
            2)
                if [ ${#NS[@]} -eq 0 ]; then
                    echo -e "${RED}No nameservers to remove!${NC}"
                    sleep 1
                    continue
                fi
                read -p "Enter number to remove (1-${#NS[@]}): " remove_idx
                if [[ $remove_idx =~ ^[0-9]+$ ]] && [ $remove_idx -ge 1 ] && [ $remove_idx -le ${#NS[@]} ]; then
                    unset "NS[$((remove_idx-1))]"
                    NS=("${NS[@]}")
                    save_config
                    echo -e "${GREEN}Nameserver removed successfully!${NC}"
                else
                    echo -e "${RED}Invalid selection!${NC}"
                fi
                sleep 1
                ;;
            3) return ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Function to manage DNS hosts
manage_dns() {
    local choice
    while true; do
        show_banner
        echo -e "${CYAN}Current DNS Hosts:${NC}"
        if [ ${#HOSTS[@]} -eq 0 ]; then
            echo -e "${YELLOW}No DNS hosts configured${NC}"
        else
            for i in "${!HOSTS[@]}"; do
                echo -e "${WHITE}$((i+1)). ${NC}${HOSTS[$i]}"
            done
        fi
        echo
        echo -e "1. ${GREEN}Add${NC} DNS host"
        echo -e "2. ${RED}Remove${NC} DNS host"
        echo -e "3. ${BLUE}Back${NC} to main menu"
        echo
        read -p "Enter your choice (1-3): " choice

        case $choice in
            1)
                read -p "Enter new DNS host: " new_host
                if [[ ! " ${HOSTS[@]} " =~ " ${new_host} " ]]; then
                    HOSTS+=("$new_host")
                    save_config
                    echo -e "${GREEN}DNS host added successfully!${NC}"
                else
                    echo -e "${RED}DNS host already exists!${NC}"
                fi
                sleep 1
                ;;
            2)
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    echo -e "${RED}No DNS hosts to remove!${NC}"
                    sleep 1
                    continue
                fi
                read -p "Enter number to remove (1-${#HOSTS[@]}): " remove_idx
                if [[ $remove_idx =~ ^[0-9]+$ ]] && [ $remove_idx -ge 1 ] && [ $remove_idx -le ${#HOSTS[@]} ]; then
                    unset "HOSTS[$((remove_idx-1))]"
                    HOSTS=("${HOSTS[@]}")
                    save_config
                    echo -e "${GREEN}DNS host removed successfully!${NC}"
                else
                    echo -e "${RED}Invalid selection!${NC}"
                fi
                sleep 1
                ;;
            3) return ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Function to configure sleep time
configure_sleep() {
    show_banner
    echo -e "${CYAN}Current sleep time:${NC} ${LOOP_DELAY} seconds"
    echo
    while true; do
        read -p "Enter new sleep time (0-10 seconds): " new_delay
        if [[ $new_delay =~ ^[0-9]+$ ]] && [ $new_delay -ge 0 ] && [ $new_delay -le 10 ]; then
            LOOP_DELAY=$new_delay
            save_config
            echo -e "${GREEN}Sleep time updated successfully!${NC}"
            sleep 1
            break
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 10.${NC}"
        fi
    done
}

# Function to check dig command
check_dig() {
    if command -v dig >/dev/null 2>&1; then
        _DIG="$(command -v dig)"
        return 0
    elif [ -f "/data/data/com.termux/files/home/go/bin/fastdig" ]; then
        _DIG="/data/data/com.termux/files/home/go/bin/fastdig"
        return 0
    else
        echo -e "${RED}Error: 'dig' command not found. Please install dnsutils or configure fastdig.${NC}"
        return 1
    fi
}

# Function to check DNS
check_dns() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS[@]}"; do
            T="${HOSTS[$i]}"
            START_TIME=$(date +%s%N)
            if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                STATUS="${GREEN}✓${NC}"
            else
                STATUS="${RED}✗${NC}"
            fi
            END_TIME=$(date +%s%N)
            PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
            
            echo -e "├─${BLUE}NS:${NC} ${WHITE}${R}${NC}"
            echo -e "├─${CYAN}DNS:${NC} ${WHITE}${T}${NC}"
            echo -e "├─${YELLOW}Status:${NC} ${STATUS} ${YELLOW}${PING_MS}ms${NC}"
            echo -e "└─${PURPLE}Count:${NC} ${WHITE}${DIG_COUNT}${NC}"
            echo -e "${BLUE}────────────────────────────────────────${NC}"
            
            DIG_COUNT=$((DIG_COUNT + 1))
        done
    done
}

# Function to start monitoring
start_monitoring() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        draw_box "Error: Please configure NS and DNS settings first"
        sleep 2
        return
    }
    
    clear
    draw_box "Monitoring Started"
    echo -e "${CYAN}DNS Hosts:${NC} ${WHITE}${HOSTS[*]}${NC}"
    echo -e "${CYAN}Nameservers:${NC} ${WHITE}${NS[*]}${NC}"
    echo -e "${CYAN}Sleep Time:${NC} ${WHITE}${LOOP_DELAY}${NC} seconds"
    echo -e "\n${YELLOW}Press Ctrl+C to stop monitoring${NC}\n"
    
    while true; do
        check_dns
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Main menu function
main_menu() {
    local choice
    while true; do
        show_banner
        echo -e "${CYAN}Main Menu:${NC}"
        echo -e "1. ${WHITE}Manage Nameservers${NC} (${GREEN}${#NS[@]}${NC} configured)"
        echo -e "2. ${WHITE}Manage DNS Hosts${NC} (${GREEN}${#HOSTS[@]}${NC} configured)"
        echo -e "3. ${WHITE}Configure Sleep Time${NC} (${GREEN}${LOOP_DELAY}s${NC})"
        echo -e "4. ${WHITE}Start Monitoring${NC}"
        echo -e "5. ${RED}Exit${NC}"
        echo
        read -p "Enter your choice (1-5): " choice
        
        case $choice in
            1) manage_nameservers ;;
            2) manage_dns ;;
            3) configure_sleep ;;
            4) start_monitoring ;;
            5) echo -e "\n${GREEN}Thank you for using DNS Management & Monitoring Tool!${NC}"; exit 0 ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}Cleaning up and exiting...${NC}"
    exit 1
}

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
