#!/bin/bash
# TFN VPN DNS Keep-Alive Script
# Version 2.0
# Enhanced with advanced menu interface

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
VER="2.0"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"

# Function to display styled menu header
show_menu_header() {
    local title="$1"
    echo -e "\n${BLUE}╔════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}           $title      ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════╝${NC}"
}

# Function to display styled menu item
show_menu_item() {
    local number="$1"
    local text="$2"
    echo -e "${YELLOW}[$number]${NC} $text"
}

# Function to show banner
show_banner() {
    clear
    echo -e "${BLUE}╔══════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}           TFN VPN Keep-Alive Tool    ${BLUE}║${NC}"
    echo -e "${BLUE}║${CYAN}             Version: ${VER}            ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════╝${NC}"
}

# DNS Management Functions
add_dns() {
    read -p "Enter new DNS to add: " new_dns
    if [[ ! " ${HOSTS[@]} " =~ " ${new_dns} " ]]; then
        HOSTS+=("$new_dns")
        save_config
        echo -e "${GREEN}DNS $new_dns added successfully!${NC}"
    else
        echo -e "${RED}DNS already exists!${NC}"
    fi
    sleep 1
}

remove_dns() {
    if [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}No DNS entries to remove!${NC}"
        sleep 1
        return
    fi
    
    echo -e "\n${CYAN}Current DNS entries:${NC}"
    for i in "${!HOSTS[@]}"; do
        echo -e "$((i+1)). ${HOSTS[$i]}"
    done
    
    read -p "Enter number to remove: " index
    if [[ "$index" =~ ^[0-9]+$ ]] && [ "$index" -ge 1 ] && [ "$index" -le "${#HOSTS[@]}" ]]; then
        removed_dns="${HOSTS[$((index-1))]}"
        HOSTS=("${HOSTS[@]:0:$((index-1))}" "${HOSTS[@]:$index}")
        save_config
        echo -e "${GREEN}DNS $removed_dns removed successfully!${NC}"
    else
        echo -e "${RED}Invalid selection!${NC}"
    fi
    sleep 1
}

view_dns() {
    echo -e "\n${CYAN}Current DNS entries:${NC}"
    if [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${YELLOW}No DNS entries configured${NC}"
    else
        for i in "${!HOSTS[@]}"; do
            echo -e "$((i+1)). ${HOSTS[$i]}"
        done
    fi
    read -n 1 -s -r -p "Press any key to continue..."
}

# Nameserver Management Functions
add_nameserver() {
    read -p "Enter new nameserver to add: " new_ns
    if [[ ! " ${NS[@]} " =~ " ${new_ns} " ]]; then
        NS+=("$new_ns")
        save_config
        echo -e "${GREEN}Nameserver $new_ns added successfully!${NC}"
    else
        echo -e "${RED}Nameserver already exists!${NC}"
    fi
    sleep 1
}

remove_nameserver() {
    if [ ${#NS[@]} -eq 0 ]; then
        echo -e "${RED}No nameserver entries to remove!${NC}"
        sleep 1
        return
    fi
    
    echo -e "\n${CYAN}Current nameserver entries:${NC}"
    for i in "${!NS[@]}"; do
        echo -e "$((i+1)). ${NS[$i]}"
    done
    
    read -p "Enter number to remove: " index
    if [[ "$index" =~ ^[0-9]+$ ]] && [ "$index" -ge 1 ] && [ "$index" -le "${#NS[@]}" ]]; then
        removed_ns="${NS[$((index-1))]}"
        NS=("${NS[@]:0:$((index-1))}" "${NS[@]:$index}")
        save_config
        echo -e "${GREEN}Nameserver $removed_ns removed successfully!${NC}"
    else
        echo -e "${RED}Invalid selection!${NC}"
    fi
    sleep 1
}

view_nameserver() {
    echo -e "\n${CYAN}Current nameserver entries:${NC}"
    if [ ${#NS[@]} -eq 0 ]; then
        echo -e "${YELLOW}No nameserver entries configured${NC}"
    else
        for i in "${!NS[@]}"; do
            echo -e "$((i+1)). ${NS[$i]}"
        done
    fi
    read -n 1 -s -r -p "Press any key to continue..."
}

# DNS Menu
dns_menu() {
    local choice
    while true; do
        show_banner
        show_menu_header "DNS Management"
        show_menu_item "1" "Add DNS"
        show_menu_item "2" "Remove DNS"
        show_menu_item "3" "View Current DNS"
        show_menu_item "4" "Back to Main Menu"
        echo
        read -p "Enter your choice (1-4): " choice
        
        case $choice in
            1) add_dns ;;
            2) remove_dns ;;
            3) view_dns ;;
            4) return ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Nameserver Menu
nameserver_menu() {
    local choice
    while true; do
        show_banner
        show_menu_header "Nameserver Management"
        show_menu_item "1" "Add Nameserver"
        show_menu_item "2" "Remove Nameserver"
        show_menu_item "3" "View Current Nameserver"
        show_menu_item "4" "Back to Main Menu"
        echo
        read -p "Enter your choice (1-4): " choice
        
        case $choice in
            1) add_nameserver ;;
            2) remove_nameserver ;;
            3) view_nameserver ;;
            4) return ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        show_banner
        show_menu_header "Loop Delay Configuration"
        echo -e "Current delay: ${CYAN}${LOOP_DELAY}${NC} seconds"
        echo
        read -p "Enter new loop delay (0-5 seconds): " new_delay
        if [[ ${new_delay} =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            save_config
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            sleep 1
            return
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
            sleep 1
        fi
    done
}

# Enhanced check_dns function with better ping display
check_dns() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS[@]}"; do
            T="${HOSTS[$i]}"
            START_TIME=$(date +%s%N)
            if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                STATUS="${GREEN}✓${NC}"
            else
                STATUS="${RED}✗${NC}"
            fi
            END_TIME=$(date +%s%N)
            PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
            
            # Color code for ping
            if [ $PING_MS -lt 100 ]; then
                PING_COLOR=$GREEN
            elif [ $PING_MS -lt 300 ]; then
                PING_COLOR=$YELLOW
            else
                PING_COLOR=$RED
            fi
            
            echo -e "║ NS:${BLUE}${R}${NC} DNS:${CYAN}${T}${NC} ${STATUS} ${PING_COLOR}${PING_MS}ms${NC} Count:${DIG_COUNT} ║"
            DIG_COUNT=$((DIG_COUNT + 1))
        done
    done
}

# Function to start digging
start_digging() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}Error: Please configure NS and DNS settings first.${NC}"
        sleep 2
        return
    fi
    
    clear
    show_menu_header "Digging Started"
    echo -e "${CYAN}DNS List:${NC} ${HOSTS[*]}"
    echo -e "${CYAN}NS List:${NC} ${NS[*]}"
    echo -e "${CYAN}Loop Delay:${NC} ${LOOP_DELAY} seconds"
    echo -e "\n${YELLOW}Press Ctrl+C to stop digging${NC}\n"
    
    while true; do
        echo -e "${BLUE}╔════════════════════════════════════════════╗${NC}"
        check_dns
        echo -e "${BLUE}╚════════════════════════════════════════════╝${NC}"
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Main menu function
main_menu() {
    local choice
    while true; do
        show_banner
        show_menu_header "Main Menu"
        show_menu_item "1" "DNS Management"
        show_menu_item "2" "Nameserver Management"
        show_menu_item "3" "Set Loop Delay"
        show_menu_item "4" "Start Digging"
        show_menu_item "5" "Exit"
        echo
        read -p "Enter your choice (1-5): " choice
        
        case $choice in
            1) dns_menu ;;
            2) nameserver_menu ;;
            3) set_loop_delay ;;
            4) start_digging ;;
            5) echo -e "\n${GREEN}Thank you for using TFN VPN Keep-Alive Tool!${NC}"; exit 0 ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Other functions remain the same (save_config, load_config, check_dig, cleanup)
save_config() {
    echo "NS=${NS[*]}" > "$CONFIG_FILE"
    echo "HOSTS=${HOSTS[*]}" >> "$CONFIG_FILE"
    echo "LOOP_DELAY=$LOOP_DELAY" >> "$CONFIG_FILE"
}

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        IFS=' ' read -ra NS <<< "$NS"
        IFS=' ' read -ra HOSTS <<< "$HOSTS"
        return 0
    fi
    return 1
}

check_dig() {
    if command -v dig >/dev/null 2>&1; then
        _DIG="$(command -v dig)"
        return 0
    elif [ -f "/data/data/com.termux/files/home/go/bin/fastdig" ]; then
        _DIG="/data/data/com.termux/files/home/go/bin/fastdig"
        return 0
    else
        echo -e "${RED}Error: 'dig' command not found. Please install dnsutils or configure fastdig.${NC}"
        return 1
    fi
}

cleanup() {
    echo -e "\n${YELLOW}Cleaning up and exiting...${NC}"
    exit 1
}

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
