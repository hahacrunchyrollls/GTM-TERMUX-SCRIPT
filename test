#!/bin/bash
# TFN VPN DNS Keep-Alive Script
# Version 2.0
# Enhanced with advanced menu interface

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Global variables
VER="2.0"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"

# Function to display fancy header
show_header() {
    echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}           TFN VPN Keep-Alive Tool           ${BLUE}║${NC}"
    echo -e "${BLUE}║${CYAN}              Version: ${VER}                 ${BLUE}║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
}

# Function to show DNS management menu
dns_menu() {
    local choice
    while true; do
        clear
        show_header
        echo -e "\n${CYAN}DNS Management Menu:${NC}"
        echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║${WHITE} 1. Add DNS                                  ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 2. Remove DNS                               ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 3. Remove All DNS                           ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 4. View Current DNS List                    ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 5. Back to Main Menu                        ${BLUE}║${NC}"
        echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
        echo -e "\n${YELLOW}Current DNS List:${NC} ${HOSTS[*]:-None}"
        echo
        read -p "Enter your choice (1-5): " choice

        case $choice in
            1)
                read -p "Enter DNS to add: " dns
                if [[ ! " ${HOSTS[@]} " =~ " ${dns} " ]]; then
                    HOSTS+=("$dns")
                    echo -e "${GREEN}DNS added successfully!${NC}"
                else
                    echo -e "${RED}DNS already exists!${NC}"
                fi
                save_config
                sleep 1
                ;;
            2)
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    echo -e "${RED}No DNS entries to remove!${NC}"
                else
                    echo "Select DNS to remove:"
                    for i in "${!HOSTS[@]}"; do
                        echo "$((i+1)). ${HOSTS[i]}"
                    done
                    read -p "Enter number to remove: " num
                    if [ "$num" -le "${#HOSTS[@]}" ] && [ "$num" -gt 0 ]; then
                        unset 'HOSTS[num-1]'
                        HOSTS=("${HOSTS[@]}")
                        echo -e "${GREEN}DNS removed successfully!${NC}"
                        save_config
                    else
                        echo -e "${RED}Invalid selection!${NC}"
                    fi
                fi
                sleep 1
                ;;
            3)
                HOSTS=()
                echo -e "${GREEN}All DNS entries removed!${NC}"
                save_config
                sleep 1
                ;;
            4)
                echo -e "\n${CYAN}Current DNS List:${NC}"
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    echo "No DNS entries configured"
                else
                    for i in "${!HOSTS[@]}"; do
                        echo "$((i+1)). ${HOSTS[i]}"
                    done
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            5)
                return
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Function to show nameserver management menu
nameserver_menu() {
    local choice
    while true; do
        clear
        show_header
        echo -e "\n${CYAN}Nameserver Management Menu:${NC}"
        echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║${WHITE} 1. Add Nameserver                           ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 2. Remove Nameserver                        ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 3. Remove All Nameservers                   ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 4. View Current Nameservers                 ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 5. Back to Main Menu                        ${BLUE}║${NC}"
        echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
        echo -e "\n${YELLOW}Current Nameservers:${NC} ${NS[*]:-None}"
        echo
        read -p "Enter your choice (1-5): " choice

        case $choice in
            1)
                read -p "Enter nameserver to add: " nameserver
                if [[ ! " ${NS[@]} " =~ " ${nameserver} " ]]; then
                    NS+=("$nameserver")
                    echo -e "${GREEN}Nameserver added successfully!${NC}"
                else
                    echo -e "${RED}Nameserver already exists!${NC}"
                fi
                save_config
                sleep 1
                ;;
            2)
                if [ ${#NS[@]} -eq 0 ]; then
                    echo -e "${RED}No nameservers to remove!${NC}"
                else
                    echo "Select nameserver to remove:"
                    for i in "${!NS[@]}"; do
                        echo "$((i+1)). ${NS[i]}"
                    done
                    read -p "Enter number to remove: " num
                    if [ "$num" -le "${#NS[@]}" ] && [ "$num" -gt 0 ]; then
                        unset 'NS[num-1]'
                        NS=("${NS[@]}")
                        echo -e "${GREEN}Nameserver removed successfully!${NC}"
                        save_config
                    else
                        echo -e "${RED}Invalid selection!${NC}"
                    fi
                fi
                sleep 1
                ;;
            3)
                NS=()
                echo -e "${GREEN}All nameservers removed!${NC}"
                save_config
                sleep 1
                ;;
            4)
                echo -e "\n${CYAN}Current Nameservers:${NC}"
                if [ ${#NS[@]} -eq 0 ]; then
                    echo "No nameservers configured"
                else
                    for i in "${!NS[@]}"; do
                        echo "$((i+1)). ${NS[i]}"
                    done
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            5)
                return
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        clear
        show_header
        echo -e "\n${CYAN}Loop Delay Configuration${NC}"
        echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║${WHITE} Current Loop Delay: ${LOOP_DELAY} seconds           ${BLUE}║${NC}"
        echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
        echo -e "\nEnter new loop delay (0-5 seconds): "
        read delay
        if [[ "$delay" =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$delay
            save_config
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            sleep 1
            return
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
            sleep 1
        fi
    done
}

# Function to start digging
start_digging() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}Error: Please configure nameservers and DNS entries first.${NC}"
        sleep 2
        return
    fi

    clear
    show_header
    echo -e "\n${YELLOW}Digging Started${NC}"
    echo -e "${CYAN}DNS List:${NC} ${HOSTS[*]}"
    echo -e "${CYAN}Nameservers:${NC} ${NS[*]}"
    echo -e "${CYAN}Loop Delay:${NC} ${LOOP_DELAY} seconds"
    echo -e "\n${YELLOW}Press Ctrl+C to stop digging${NC}\n"

    while true; do
        check_dns
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Main menu function
main_menu() {
    local choice
    while true; do
        clear
        show_header
        echo -e "\n${CYAN}Main Menu:${NC}"
        echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║${WHITE} 1. DNS Management                           ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 2. Nameserver Management                    ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 3. Set Loop Delay                          ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 4. Start Digging                           ${BLUE}║${NC}"
        echo -e "${BLUE}║${WHITE} 5. Exit                                    ${BLUE}║${NC}"
        echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
        echo
        read -p "Enter your choice (1-5): " choice

        case $choice in
            1) dns_menu ;;
            2) nameserver_menu ;;
            3) set_loop_delay ;;
            4) start_digging ;;
            5)
                echo -e "\n${GREEN}Thank you for using TFN VPN Keep-Alive Tool!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Keep existing functions (check_dig, save_config, load_config, check_dns, cleanup)
# [Previous implementation remains the same]

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
