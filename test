#!/data/data/com.termux/files/usr/bin/bash

# Colors
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
MAGENTA='\e[1;35m'
CYAN='\e[1;36m'
NC='\e[0m' # No Color

# Variables
VERSION="1.0"
LOOP_DELAY=5
CUSTOM_DIG="/data/data/com.termux/files/home/go/bin/fastdig"
DIG_EXEC="DEFAULT"
declare -a HOSTS=()
declare -a NAMESERVERS=()

# Banner
show_banner() {
    clear
    echo -e "${CYAN}╔════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║       DNS Digger Tool for Termux       ║${NC}"
    echo -e "${CYAN}║            Version: ${VERSION}              ║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════╝${NC}"
    echo
}

# Check if dig is installed
check_dig() {
    case "${DIG_EXEC}" in
        DEFAULT|D)
            _DIG="$(command -v dig)"
            ;;
        CUSTOM|C)
            _DIG="${CUSTOM_DIG}"
            ;;
    esac

    if [ ! $(command -v ${_DIG}) ]; then
        echo -e "${RED}Error: dig command not found!${NC}"
        echo -e "${YELLOW}Please install dnsutils by running:${NC}"
        echo -e "${GREEN}pkg install dnsutils${NC}"
        exit 1
    fi
}

# DNS Management Menu
dns_menu() {
    while true; do
        show_banner
        echo -e "${YELLOW}=== DNS Management ===${NC}"
        echo -e "${CYAN}1.${NC} Add DNS"
        echo -e "${CYAN}2.${NC} Remove DNS"
        echo -e "${CYAN}3.${NC} Remove All DNS"
        echo -e "${CYAN}4.${NC} Show DNS List"
        echo -e "${CYAN}5.${NC} Back to Main Menu"
        echo
        echo -e "${GREEN}Current DNS List: ${NC}${BLUE}${HOSTS[@]}${NC}"
        echo
        read -p "Select an option [1-5]: " choice

        case $choice in
            1)
                read -p "Enter DNS IP: " dns
                HOSTS+=("$dns")
                echo -e "${GREEN}DNS added successfully!${NC}"
                sleep 1
                ;;
            2)
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    echo -e "${RED}No DNS entries to remove!${NC}"
                    sleep 1
                    continue
                fi
                echo "Current DNS entries:"
                for i in "${!HOSTS[@]}"; do
                    echo -e "${CYAN}$i${NC}: ${HOSTS[$i]}"
                done
                read -p "Enter index to remove: " index
                if [ $index -ge 0 ] && [ $index -lt ${#HOSTS[@]} ]; then
                    unset 'HOSTS[$index]'
                    HOSTS=("${HOSTS[@]}")
                    echo -e "${GREEN}DNS removed successfully!${NC}"
                else
                    echo -e "${RED}Invalid index!${NC}"
                fi
                sleep 1
                ;;
            3)
                HOSTS=()
                echo -e "${GREEN}All DNS entries removed!${NC}"
                sleep 1
                ;;
            4)
                echo -e "${YELLOW}Current DNS List:${NC}"
                for dns in "${HOSTS[@]}"; do
                    echo -e "${BLUE}$dns${NC}"
                done
                read -p "Press Enter to continue..."
                ;;
            5)
                return
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Nameserver Management Menu
nameserver_menu() {
    while true; do
        show_banner
        echo -e "${YELLOW}=== Nameserver Management ===${NC}"
        echo -e "${CYAN}1.${NC} Add Nameserver"
        echo -e "${CYAN}2.${NC} Remove Nameserver"
        echo -e "${CYAN}3.${NC} Remove All Nameservers"
        echo -e "${CYAN}4.${NC} Show Nameserver List"
        echo -e "${CYAN}5.${NC} Back to Main Menu"
        echo
        echo -e "${GREEN}Current Nameservers: ${NC}${BLUE}${NAMESERVERS[@]}${NC}"
        echo
        read -p "Select an option [1-5]: " choice

        case $choice in
            1)
                read -p "Enter Nameserver: " ns
                NAMESERVERS+=("$ns")
                echo -e "${GREEN}Nameserver added successfully!${NC}"
                sleep 1
                ;;
            2)
                if [ ${#NAMESERVERS[@]} -eq 0 ]; then
                    echo -e "${RED}No Nameserver entries to remove!${NC}"
                    sleep 1
                    continue
                fi
                echo "Current Nameserver entries:"
                for i in "${!NAMESERVERS[@]}"; do
                    echo -e "${CYAN}$i${NC}: ${NAMESERVERS[$i]}"
                done
                read -p "Enter index to remove: " index
                if [ $index -ge 0 ] && [ $index -lt ${#NAMESERVERS[@]} ]; then
                    unset 'NAMESERVERS[$index]'
                    NAMESERVERS=("${NAMESERVERS[@]}")
                    echo -e "${GREEN}Nameserver removed successfully!${NC}"
                else
                    echo -e "${RED}Invalid index!${NC}"
                fi
                sleep 1
                ;;
            3)
                NAMESERVERS=()
                echo -e "${GREEN}All Nameserver entries removed!${NC}"
                sleep 1
                ;;
            4)
                echo -e "${YELLOW}Current Nameserver List:${NC}"
                for ns in "${NAMESERVERS[@]}"; do
                    echo -e "${BLUE}$ns${NC}"
                done
                read -p "Press Enter to continue..."
                ;;
            5)
                return
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Dig function
perform_dig() {
    if [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}Error: No DNS entries available!${NC}"
        return 1
    fi
    if [ ${#NAMESERVERS[@]} -eq 0 ]; then
        echo -e "${RED}Error: No Nameserver entries available!${NC}"
        return 1
    }

    echo -e "${YELLOW}=== Digging DNS ===${NC}"
    echo -e "${CYAN}Press Ctrl+C to stop${NC}"
    echo

    while true; do
        for host in "${HOSTS[@]}"; do
            for ns in "${NAMESERVERS[@]}"; do
                result=$(timeout -k .3 .3 ${_DIG} @${host} ${ns} 2>&1)
                if [ $? -eq 0 ]; then
                    status="${GREEN}SUCCESS${NC}"
                else
                    status="${RED}FAILED${NC}"
                fi
                echo -e "[$(date +%H:%M:%S)] ${BLUE}DNS${NC}: ${host} | ${BLUE}NS${NC}: ${ns} | Status: ${status}"
            done
        done
        echo -e "${YELLOW}Waiting ${LOOP_DELAY} seconds...${NC}"
        sleep $LOOP_DELAY
        echo
    done
}

# Main Menu
main_menu() {
    while true; do
        show_banner
        echo -e "${YELLOW}=== Main Menu ===${NC}"
        echo -e "${CYAN}1.${NC} DNS Management"
        echo -e "${CYAN}2.${NC} Nameserver Management"
        echo -e "${CYAN}3.${NC} Set Loop Delay (Current: ${LOOP_DELAY}s)"
        echo -e "${CYAN}4.${NC} Start Digging"
        echo -e "${CYAN}5.${NC} Exit"
        echo
        read -p "Select an option [1-5]: " choice

        case $choice in
            1)
                dns_menu
                ;;
            2)
                nameserver_menu
                ;;
            3)
                read -p "Enter new loop delay (0-5 seconds): " new_delay
                if [[ "$new_delay" =~ ^[0-5]$ ]]; then
                    LOOP_DELAY=$new_delay
                    echo -e "${GREEN}Loop delay updated successfully!${NC}"
                else
                    echo -e "${RED}Invalid delay value! Must be between 0 and 5.${NC}"
                fi
                sleep 1
                ;;
            4)
                perform_dig
                ;;
            5)
                echo -e "${GREEN}Thanks for using DNS Digger!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Check dependencies
check_dig

# Start the script
main_menu
