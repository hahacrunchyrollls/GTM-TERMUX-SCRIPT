#!/bin/bash
# TFN VPN DNS Keep-Alive Script
# Version 1.1
# Enhanced with advanced menu interface

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
VER="1.1"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"

# Function to create line separator
draw_line() {
    echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
}

# Function to show banner
show_banner() {
    clear
    draw_line
    echo -e "${CYAN}              TFN VPN Keep-Alive Tool           ${NC}"
    echo -e "${CYAN}                Version: ${VER}                  ${NC}"
    draw_line
}

# Function to manage DNS entries
manage_dns() {
    while true; do
        show_banner
        echo -e "\n${CYAN}DNS Management Menu:${NC}"
        echo -e "1. ${GREEN}Add DNS${NC}"
        echo -e "2. ${RED}Remove DNS${NC}"
        echo -e "3. ${YELLOW}Remove All DNS${NC}"
        echo -e "4. ${BLUE}Back to Main Menu${NC}"
        echo -e "\n${PURPLE}Current DNS List:${NC} ${HOSTS[*]:-None}"
        echo
        read -p "Enter your choice (1-4): " dns_choice

        case $dns_choice in
            1)
                read -p "Enter DNS to add: " new_dns
                if [[ ! " ${HOSTS[@]} " =~ " ${new_dns} " ]]; then
                    HOSTS+=("$new_dns")
                    echo -e "${GREEN}DNS added successfully!${NC}"
                else
                    echo -e "${RED}DNS already exists!${NC}"
                fi
                ;;
            2)
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    echo -e "${RED}No DNS entries to remove!${NC}"
                else
                    echo "Select DNS to remove:"
                    for i in "${!HOSTS[@]}"; do
                        echo "$((i+1)). ${HOSTS[i]}"
                    done
                    read -p "Enter number to remove: " remove_idx
                    if [ $((remove_idx-1)) -ge 0 ] && [ $((remove_idx-1)) -lt ${#HOSTS[@]} ]; then
                        unset 'HOSTS[$((remove_idx-1))]'
                        HOSTS=("${HOSTS[@]}")
                        echo -e "${GREEN}DNS removed successfully!${NC}"
                    else
                        echo -e "${RED}Invalid selection!${NC}"
                    fi
                fi
                ;;
            3)
                HOSTS=()
                echo -e "${YELLOW}All DNS entries removed!${NC}"
                ;;
            4)
                return
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                ;;
        esac
        save_config
        sleep 1
    done
}

# Function to manage nameservers
manage_nameserver() {
    while true; do
        show_banner
        echo -e "\n${CYAN}Nameserver Management Menu:${NC}"
        echo -e "1. ${GREEN}Add Nameserver${NC}"
        echo -e "2. ${RED}Remove Nameserver${NC}"
        echo -e "3. ${YELLOW}Remove All Nameservers${NC}"
        echo -e "4. ${BLUE}Back to Main Menu${NC}"
        echo -e "\n${PURPLE}Current Nameservers:${NC} ${NS[*]:-None}"
        echo
        read -p "Enter your choice (1-4): " ns_choice

        case $ns_choice in
            1)
                read -p "Enter nameserver to add: " new_ns
                if [[ ! " ${NS[@]} " =~ " ${new_ns} " ]]; then
                    NS+=("$new_ns")
                    echo -e "${GREEN}Nameserver added successfully!${NC}"
                else
                    echo -e "${RED}Nameserver already exists!${NC}"
                fi
                ;;
            2)
                if [ ${#NS[@]} -eq 0 ]; then
                    echo -e "${RED}No nameservers to remove!${NC}"
                else
                    echo "Select nameserver to remove:"
                    for i in "${!NS[@]}"; do
                        echo "$((i+1)). ${NS[i]}"
                    done
                    read -p "Enter number to remove: " remove_idx
                    if [ $((remove_idx-1)) -ge 0 ] && [ $((remove_idx-1)) -lt ${#NS[@]} ]; then
                        unset 'NS[$((remove_idx-1))]'
                        NS=("${NS[@]}")
                        echo -e "${GREEN}Nameserver removed successfully!${NC}"
                    else
                        echo -e "${RED}Invalid selection!${NC}"
                    fi
                fi
                ;;
            3)
                NS=()
                echo -e "${YELLOW}All nameservers removed!${NC}"
                ;;
            4)
                return
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                ;;
        esac
        save_config
        sleep 1
    done
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        show_banner
        echo -e "\n${CYAN}Current Loop Delay:${NC} ${LOOP_DELAY} seconds"
        read -p "Enter new loop delay (0-5 seconds): " new_delay
        if [[ $new_delay =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            save_config
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            sleep 1
            return
        else
            echo -e "${RED}Invalid input! Please enter a number between 0 and 5.${NC}"
            sleep 1
        fi
    done
}

# Main menu function
main_menu() {
    while true; do
        show_banner
        echo -e "\n${CYAN}Main Menu:${NC}"
        echo -e "1. ${GREEN}DNS Management${NC}"
        echo -e "2. ${GREEN}Nameserver Management${NC}"
        echo -e "3. ${YELLOW}Set Loop Delay${NC} (Current: ${LOOP_DELAY}s)"
        echo -e "4. ${BLUE}Start Digging${NC}"
        echo -e "5. ${RED}Exit${NC}"
        echo
        read -p "Enter your choice (1-5): " choice

        case $choice in
            1) manage_dns ;;
            2) manage_nameserver ;;
            3) set_loop_delay ;;
            4) 
                if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
                    echo -e "${RED}Error: Please configure NS and DNS settings first.${NC}"
                    sleep 2
                else
                    start_monitoring
                fi
                ;;
            5)
                echo -e "\n${GREEN}Thank you for using TFN VPN Keep-Alive Tool!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Keep existing functions (save_config, load_config, check_dig, check_dns, start_monitoring, cleanup)
# [Previous implementation remains the same]

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
