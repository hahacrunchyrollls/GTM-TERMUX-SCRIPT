#!/bin/bash
# TFN VPN DNS Keep-Alive Script
# Version 2.1
# Enhanced with advanced menu interface and improved error handling

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Global variables
VER="2.1"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"
LOG_FILE="$HOME/.tfn_vpn.log"

# Function to log messages
log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "$timestamp - $message" >> "$LOG_FILE"
}

# Function to check if dig command is available
check_dig() {
    if ! command -v dig &> /dev/null; then
        echo -e "${RED}Error: 'dig' command not found. Please install dnsutils/bind-tools.${NC}"
        log_message "Error: 'dig' command not found"
        return 1
    fi
    return 0
}

# Function to save configuration
save_config() {
    {
        echo "# TFN VPN Keep-Alive Configuration"
        echo "LOOP_DELAY=$LOOP_DELAY"
        echo "NS=(${NS[*]})"
        echo "HOSTS=(${HOSTS[*]})"
    } > "$CONFIG_FILE"
    
    if [ $? -eq 0 ]; then
        log_message "Configuration saved successfully"
    else
        log_message "Error saving configuration"
    fi
}

# Function to load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        log_message "Configuration loaded from $CONFIG_FILE"
    else
        # Default configuration
        LOOP_DELAY=1
        NS=("8.8.8.8" "1.1.1.1")
        HOSTS=("google.com" "cloudflare.com")
        save_config
        log_message "Created new configuration with defaults"
    fi
}

# Function to check DNS
check_dns() {
    local status=0
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo -e "${YELLOW}[$current_time] Checking DNS...${NC}"
    
    for ns in "${NS[@]}"; do
        for host in "${HOSTS[@]}"; do
            echo -en "${CYAN}Testing $host using $ns... ${NC}"
            if dig @"$ns" "$host" +short +time=2 +tries=1 &>/dev/null; then
                echo -e "${GREEN}OK${NC}"
                ((DIG_COUNT++))
            else
                echo -e "${RED}FAILED${NC}"
                status=1
                log_message "DNS check failed for $host using $ns"
            fi
        done
    done
    
    echo -e "${BLUE}Total successful queries: $DIG_COUNT${NC}"
    return $status
}

# Function to cleanup
cleanup() {
    echo -e "\n${YELLOW}Cleaning up and exiting...${NC}"
    log_message "Script terminated by user"
    save_config
    exit 0
}

# Display fancy header
show_header() {
    echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}           TFN VPN Keep-Alive Tool           ${BLUE}║${NC}"
    echo -e "${BLUE}║${CYAN}              Version: ${VER}                 ${BLUE}║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
}

# [Previous menu functions remain the same: dns_menu, nameserver_menu, set_loop_delay, start_digging, main_menu]
# ... [Keep your existing menu function implementations]

# Function to validate IP address
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        return $?
    fi
    return 1
}

# Function to validate domain name
validate_domain() {
    local domain=$1
    if [[ $domain =~ ^[a-zA-Z0-9][a-zA-Z0-9-.]+(.[a-zA-Z]{2,})+$ ]]; then
        return 0
    fi
    return 1
}

# Enhanced version of start_digging with better error handling
start_digging() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}Error: Please configure nameservers and DNS entries first.${NC}"
        log_message "Digging failed - missing configuration"
        sleep 2
        return
    }

    clear
    show_header
    echo -e "\n${YELLOW}Digging Started${NC}"
    echo -e "${CYAN}DNS List:${NC} ${HOSTS[*]}"
    echo -e "${CYAN}Nameservers:${NC} ${NS[*]}"
    echo -e "${CYAN}Loop Delay:${NC} ${LOOP_DELAY} seconds"
    echo -e "\n${YELLOW}Press Ctrl+C to stop digging${NC}\n"
    
    log_message "Digging started with ${#HOSTS[@]} hosts and ${#NS[@]} nameservers"

    while true; do
        if ! check_dns; then
            echo -e "${RED}Warning: Some DNS checks failed${NC}"
        fi
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Set up trap for cleanup
trap cleanup SIGINT SIGTERM

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
