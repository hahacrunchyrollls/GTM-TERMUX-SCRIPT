#!/bin/bash
## TFN VPN
## Script to keep-alive your DNSTT server domain record query from target resolver/local dns server
## Run this script excluded to your VPN tunnel (split vpn tunneling mode)

## Your DNSTT Nameserver & your Domain `A` Record
NS=''

## DNS Storage File
DNS_FILE="dns_list.txt"
## Nameserver Storage File
NS_FILE="nameserver_list.txt"

## Initialize DNS list if file exists, otherwise create empty array
if [ -f "$DNS_FILE" ]; then
    mapfile -t HOSTS < "$DNS_FILE"
else
    declare -a HOSTS=()
fi

## Linux' dig command executable filepath
## Select value: "CUSTOM|C" or "DEFAULT|D"
DIG_EXEC="DEFAULT"
## if set to CUSTOM, enter your custom dig executable path here
CUSTOM_DIG=/data/data/com.termux/files/home/go/bin/fastdig

# Function to save DNS list to file
save_dns_list() {
    printf "%s\n" "${HOSTS[@]}" > "$DNS_FILE"
}

# Function to save nameserver to file
save_nameserver() {
    echo "$NS" > "$NS_FILE"
}

# Functions for DNS management
add_dns() {
    clear
    echo "===== DNS Management Menu ====="
    echo "1. Add DNS"
    echo "2. Edit DNS using nano"
    echo "3. Remove DNS"
    echo "4. Remove all DNS"
    echo "5. Back to main menu"
    
    read -p "Choose an option: " dns_choice
    
    case $dns_choice in
        1)
            read -p "Enter DNS to add: " new_dns
            HOSTS+=("$new_dns")
            save_dns_list
            echo "DNS added successfully!"
            ;;
        2)
            if [ -f "$DNS_FILE" ]; then
                nano "$DNS_FILE"
                mapfile -t HOSTS < "$DNS_FILE"
            else
                echo "DNS file doesn't exist yet!"
            fi
            ;;
        3)
            if [ ${#HOSTS[@]} -eq 0 ]; then
                echo "No DNS entries to remove!"
                return
            fi
            echo "Current DNS entries:"
            for i in "${!HOSTS[@]}"; do
                echo "$i: ${HOSTS[$i]}"
            done
            read -p "Enter index number to remove: " index
            if [ "$index" -ge 0 ] && [ "$index" -lt "${#HOSTS[@]}" ]; then
                unset 'HOSTS[$index]'
                HOSTS=("${HOSTS[@]}")
                save_dns_list
                echo "DNS removed successfully!"
            else
                echo "Invalid index!"
            fi
            ;;
        4)
            HOSTS=()
            save_dns_list
            echo "All DNS entries removed!"
            ;;
        5)
            return
            ;;
        *)
            echo "Invalid option!"
            ;;
    esac
}

# Functions for Nameserver management
manage_nameserver() {
    clear
    echo "===== Nameserver Management Menu ====="
    echo "1. Add nameserver"
    echo "2. Edit nameserver using nano"
    echo "3. Remove nameserver"
    echo "4. Remove all nameservers"
    echo "5. Back to main menu"
    
    read -p "Choose an option: " ns_choice
    
    case $ns_choice in
        1)
            read -p "Enter nameserver to add: " NS
            save_nameserver
            echo "Nameserver added successfully!"
            ;;
        2)
            if [ -f "$NS_FILE" ]; then
                nano "$NS_FILE"
                NS=$(cat "$NS_FILE")
            else
                echo "Nameserver file doesn't exist yet!"
            fi
            ;;
        3)
            NS=""
            save_nameserver
            echo "Nameserver removed!"
            ;;
        4)
            NS=""
            save_nameserver
            echo "All nameservers removed!"
            ;;
        5)
            return
            ;;
        *)
            echo "Invalid option!"
            ;;
    esac
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        read -p "Please enter loop delay (0-5 seconds): " LOOP_DELAY
        if [[ ${LOOP_DELAY} =~ ^[0-5]$ ]]; then
            break
        else
            echo "Invalid input. Please enter a number between 0 and 5."
        fi
    done
}

# Function for DNS checking
check() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS}"; do
            T="${HOSTS[$i]}"
            [[ -z $(timeout -k 3 3 ${_DIG} @${T} ${R}) ]] && M=31 || M=32;
            echo -e "\e[1;${M}m\$ NS:${R} DNS:${T}\e[0m"
            unset T R M
        done
    done
}

# Function to start digging
start_digging() {
    echo "===================================================="
    echo "       DNSTT Keep-Alive script "
    echo "===================================================="
    echo -e "DNS List: [\e[1;34m${HOSTS[*]}\e[0m]"
    echo "CTRL + C to stop digging"
    
    [[ "${LOOP_DELAY}" -eq 1 ]] && let "LOOP_DELAY++"
    while true; do
        check
        echo -e "\e[1;33m├───────────────TFN─VPN────────────────┤\e[0m"
        sleep ${LOOP_DELAY}
    done
}

# Setup dig executable
case "${DIG_EXEC}" in
    DEFAULT|D)
        _DIG="$(command -v dig)"
        ;;
    CUSTOM|C)
        _DIG="${CUSTOM_DIG}"
        ;;
esac

if [ ! $(command -v ${_DIG}) ]; then
    printf "%b" "Dig command failed to run, " \
    "please install dig(dnsutils) or check " \
    "\$DIG_EXEC & \$CUSTOM_DIG variable inside $( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename "$0") file.\n" && exit 1
fi

# Trap for clean exit
endscript() {
    unset NS A LOOP_DELAY HOSTS _DIG DIG_EXEC CUSTOM_DIG T R M
    exit 1
}
trap endscript 2 15

# Main menu loop
while true; do
    clear
    echo "===== DNSTT Menu ====="
    echo "1. Manage DNS"
    echo "2. Manage Nameserver"
    echo "3. Set Loop Delay"
    echo "4. Start Digging"
    echo "5. Exit"
    
    read -p "Choose an option: " choice
    
    case $choice in
        1)
            add_dns
            ;;
        2)
            manage_nameserver
            ;;
        3)
            set_loop_delay
            ;;
        4)
            start_digging
            ;;
        5)
            echo "Exiting..."
            endscript
            ;;
        *)
            echo "Invalid option!"
            sleep 1
            ;;
    esac
done
