#!/bin/bash

# TFN VPN Menu-based DNS Manager
# Version: 1.0
# Description: Interactive menu system for managing DNSTT server domain record queries

# Color codes
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
PURPLE='\e[1;35m'
CYAN='\e[1;36m'
WHITE='\e[1;37m'
NC='\e[0m' # No Color

# Configuration variables
NS='phc.jericoo.site'
declare -a HOSTS=('124.6.181.31' '124.6.181.171' '124.6.181.30' '124.6.181.160' 
                 '124.6.181.88' '124.6.181.26' '124.6.181.27' '124.6.181.25' 
                 '124.6.181.28')
DIG_EXEC="DEFAULT"
CUSTOM_DIG=/data/data/com.termux/files/home/go/bin/fastdig
LOOP_DELAY=2
CONFIG_FILE="dnstt_config.conf"

# Banner display function
show_banner() {
    clear
    echo -e "${CYAN}═══════════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}           🌐 DNSTT Manager Menu v1.0 🌐${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════${NC}"
}

# Initialize dig command
init_dig() {
    case "${DIG_EXEC}" in
        DEFAULT|D)
            _DIG="$(command -v dig)"
            ;;
        CUSTOM|C)
            _DIG="${CUSTOM_DIG}"
            ;;
    esac
    
    if [ ! $(command -v ${_DIG}) ]; then
        echo -e "${RED}Error: Dig command not found!${NC}"
        echo -e "Please install dig (dnsutils) or check DIG_EXEC settings."
        exit 1
    fi
}

# Function to add new DNS
add_dns() {
    show_banner
    echo -e "${YELLOW}Current DNS Servers:${NC}"
    for i in "${!HOSTS[@]}"; do
        echo -e "${GREEN}$((i+1)). ${HOSTS[$i]}${NC}"
    done
    echo
    echo -e "${YELLOW}Enter new DNS IP address:${NC}"
    read -p "→ " new_dns
    
    if [[ $new_dns =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        HOSTS+=("$new_dns")
        echo -e "${GREEN}DNS added successfully!${NC}"
    else
        echo -e "${RED}Invalid IP address format!${NC}"
    fi
    sleep 2
}

# Function to add new nameserver
add_nameserver() {
    show_banner
    echo -e "${YELLOW}Current Nameserver: ${GREEN}$NS${NC}"
    echo
    echo -e "${YELLOW}Enter new nameserver:${NC}"
    read -p "→ " new_ns
    
    if [[ $new_ns =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*\.[a-zA-Z]{2,}$ ]]; then
        NS="$new_ns"
        echo -e "${GREEN}Nameserver updated successfully!${NC}"
    else
        echo -e "${RED}Invalid nameserver format!${NC}"
    fi
    sleep 2
}

# Function to set loop delay
set_loop_delay() {
    show_banner
    echo -e "${YELLOW}Current Loop Delay: ${GREEN}$LOOP_DELAY${NC} seconds"
    echo
    while true; do
        echo -e "${YELLOW}Enter new loop delay (0-5 seconds):${NC}"
        read -p "→ " new_delay
        if [[ $new_delay =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            [[ "${LOOP_DELAY}" -eq 1 ]] && let "LOOP_DELAY++"
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            break
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
        fi
    done
    sleep 2
}

# DNS check function
check_dns() {
    show_banner
    echo -e "${YELLOW}Starting DNS Check...${NC}"
    echo
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS}"; do
            T="${HOSTS[$i]}"
            [[ -z $(timeout -k 3 3 ${_DIG} @${T} ${R}) ]] && M=31 || M=32
            echo -e "\\e[1;${M}m→ NS:${R} DNS:${T}\\e[0m"
        done
    done
    echo -e "${CYAN}═══════════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}Press any key to continue...${NC}"
    read -n 1
}

# Start monitoring function
start_monitoring() {
    show_banner
    echo -e "${YELLOW}Starting DNS Monitoring...${NC}"
    echo -e "${BLUE}DNS List: ${HOSTS[*]}${NC}"
    echo -e "${BLUE}Nameserver: $NS${NC}"
    echo -e "${BLUE}Loop Delay: $LOOP_DELAY seconds${NC}"
    echo -e "${RED}Press CTRL + C to stop${NC}"
    echo
    
    while true; do
        for ((i=0; i<"${#HOSTS[*]}"; i++)); do
            for R in "${NS}"; do
                T="${HOSTS[$i]}"
                [[ -z $(timeout -k 3 3 ${_DIG} @${T} ${R}) ]] && M=31 || M=32
                echo -e "\\e[1;${M}m→ NS:${R} DNS:${T}\\e[0m"
            done
        done
        echo -e "${YELLOW}├───────────────TFN─VPN────────────────┤${NC}"
        sleep ${LOOP_DELAY}
    done
}

# Main menu function
main_menu() {
    while true; do
        show_banner
        echo -e "${YELLOW}1.${NC} Add DNS Server"
        echo -e "${YELLOW}2.${NC} Add/Change Nameserver"
        echo -e "${YELLOW}3.${NC} Set Loop Delay"
        echo -e "${YELLOW}4.${NC} Check DNS Status"
        echo -e "${YELLOW}5.${NC} Start Monitoring"
        echo -e "${YELLOW}6.${NC} Exit"
        echo
        echo -e "${CYAN}Current Configuration:${NC}"
        echo -e "${BLUE}→ DNS Servers: ${#HOSTS[@]}${NC}"
        echo -e "${BLUE}→ Nameserver: $NS${NC}"
        echo -e "${BLUE}→ Loop Delay: $LOOP_DELAY seconds${NC}"
        echo
        read -p "Enter your choice [1-6]: " choice
        
        case $choice in
            1) add_dns ;;
            2) add_nameserver ;;
            3) set_loop_delay ;;
            4) check_dns ;;
            5) start_monitoring ;;
            6) echo -e "${GREEN}Thank you for using DNSTT Manager!${NC}"; exit 0 ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Initialize and start the script
init_dig
main_menu
