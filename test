#!/bin/bash

# Copyright ©UDPTeam
# Discord: https://discord.gg/civ3
# Enhanced Menu Version

# Colors
RED='\e[1;31m'
GREEN='\e[1;32m'
BLUE='\e[1;34m'
YELLOW='\e[1;33m'
PURPLE='\e[1;35m'
CYAN='\e[1;36m'
NC='\e[0m' # No Color
BOLD='\e[1m'

# Configuration Variables
NS='ismael.ns.hashi-rama.com'
A='ismael.ns.hashi-rama.com'
LOOP_DELAY=5
declare -a HOSTS=()

# Dig Configuration
DIG_EXEC="DEFAULT"
CUSTOM_DIG=/data/data/com.termux/files/home/go/bin/fastdig

# Version
VER=0.2

# Setup dig command
case "${DIG_EXEC}" in
    DEFAULT|D)
        _DIG="$(command -v dig)"
        ;;
    CUSTOM|C)
        _DIG="${CUSTOM_DIG}"
        ;;
esac

# Check if dig is available
if [ ! $(command -v ${_DIG}) ]; then
    printf "%b" "Dig command failed to run, " \
    "please install dig(dnsutils) or check " \
    "\$DIG_EXEC & \$CUSTOM_DIG variable.\n" && exit 1
fi

# Functions
clear_screen() {
    clear
}

print_header() {
    echo -e "${PURPLE}╔════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║       ${BOLD}DNSTT Keep-Alive Script v${VER}${NC}      ${PURPLE}║${NC}"
    echo -e "${PURPLE}╚════════════════════════════════════════╝${NC}"
    echo
}

print_menu() {
    echo -e "${CYAN}╔════════════════ MAIN MENU ═══════════════╗${NC}"
    echo -e "${CYAN}║${NC} ${GREEN}1.${NC} DNS Management                         ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC} ${GREEN}2.${NC} Nameserver Management                  ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC} ${GREEN}3.${NC} Set Loop Delay (Current: ${LOOP_DELAY}s)         ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC} ${GREEN}4.${NC} Start Digging                         ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC} ${GREEN}5.${NC} Exit                                  ${CYAN}║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════╝${NC}"
}

print_dns_submenu() {
    echo -e "${YELLOW}╔═════════════ DNS MANAGEMENT ════════════╗${NC}"
    echo -e "${YELLOW}║${NC} ${GREEN}1.${NC} Add DNS                              ${YELLOW}║${NC}"
    echo -e "${YELLOW}║${NC} ${GREEN}2.${NC} Remove DNS                           ${YELLOW}║${NC}"
    echo -e "${YELLOW}║${NC} ${GREEN}3.${NC} Remove All DNS                       ${YELLOW}║${NC}"
    echo -e "${YELLOW}║${NC} ${GREEN}4.${NC} Back to Main Menu                    ${YELLOW}║${NC}"
    echo -e "${YELLOW}╚══════════════════════════════════════════╝${NC}"
}

print_nameserver_submenu() {
    echo -e "${BLUE}╔══════════ NAMESERVER MANAGEMENT ═════════╗${NC}"
    echo -e "${BLUE}║${NC} ${GREEN}1.${NC} Add Nameserver                        ${BLUE}║${NC}"
    echo -e "${BLUE}║${NC} ${GREEN}2.${NC} Remove Nameserver                     ${BLUE}║${NC}"
    echo -e "${BLUE}║${NC} ${GREEN}3.${NC} Remove All Nameservers                ${BLUE}║${NC}"
    echo -e "${BLUE}║${NC} ${GREEN}4.${NC} Back to Main Menu                     ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════╝${NC}"
}

add_dns() {
    echo -e "${YELLOW}Enter DNS IP address to add:${NC}"
    read dns_ip
    if [[ $dns_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        HOSTS+=("$dns_ip")
        echo -e "${GREEN}DNS $dns_ip added successfully!${NC}"
    else
        echo -e "${RED}Invalid IP address format!${NC}"
    fi
    sleep 2
}

remove_dns() {
    if [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}No DNS entries to remove!${NC}"
        sleep 2
        return
    fi
    
    echo -e "${YELLOW}Current DNS entries:${NC}"
    for i in "${!HOSTS[@]}"; do
        echo -e "${GREEN}$((i+1))${NC}. ${HOSTS[$i]}"
    done
    
    echo -e "${YELLOW}Enter the number of DNS to remove:${NC}"
    read dns_num
    
    if [ $dns_num -ge 1 ] && [ $dns_num -le ${#HOSTS[@]} ]; then
        unset "HOSTS[$((dns_num-1))]"
        HOSTS=("${HOSTS[@]}")
        echo -e "${GREEN}DNS removed successfully!${NC}"
    else
        echo -e "${RED}Invalid selection!${NC}"
    fi
    sleep 2
}

remove_all_dns() {
    HOSTS=()
    echo -e "${GREEN}All DNS entries removed!${NC}"
    sleep 2
}

set_loop_delay() {
    echo -e "${YELLOW}Enter loop delay (0-5 seconds):${NC}"
    read delay
    if [[ $delay =~ ^[0-5]$ ]]; then
        LOOP_DELAY=$delay
        echo -e "${GREEN}Loop delay set to $delay seconds!${NC}"
    else
        echo -e "${RED}Invalid delay value! Must be between 0-5${NC}"
    fi
    sleep 2
}

check_dns() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${A}" "${NS}"; do
            T="${HOSTS[$i]}"
            timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}✓ R:${R} D:${T}${NC}"
            else
                echo -e "${RED}✗ R:${R} D:${T}${NC}"
            fi
        done
    done
}

start_digging() {
    if [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}No DNS entries found! Please add DNS first.${NC}"
        sleep 2
        return
    }
    
    clear_screen
    print_header
    echo -e "${CYAN}Starting dig process...${NC}"
    echo -e "${BLUE}DNS List: [${HOSTS[*]}]${NC}"
    echo -e "${YELLOW}Loop Delay: ${LOOP_DELAY} seconds${NC}"
    echo -e "${RED}Press CTRL + C to stop${NC}"
    echo
    
    while true; do
        check_dns
        echo -e "${PURPLE}.--. .-.. . .- ... .     .-- .- .. -${NC}"
        sleep ${LOOP_DELAY}
    done
}

# Main Loop
while true; do
    clear_screen
    print_header
    print_menu
    echo -e "${YELLOW}Enter your choice [1-5]:${NC} "
    read choice

    case $choice in
        1)  # DNS Management Submenu
            while true; do
                clear_screen
                print_header
                print_dns_submenu
                echo -e "${YELLOW}Enter your choice [1-4]:${NC} "
                read dns_choice
                
                case $dns_choice in
                    1) add_dns ;;
                    2) remove_dns ;;
                    3) remove_all_dns ;;
                    4) break ;;
                    *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
                esac
            done
            ;;
            
        2)  # Nameserver Management Submenu
            while true; do
                clear_screen
                print_header
                print_nameserver_submenu
                echo -e "${YELLOW}Enter your choice [1-4]:${NC} "
                read ns_choice
                
                case $ns_choice in
                    1) echo "Feature coming soon..."; sleep 2 ;;
                    2) echo "Feature coming soon..."; sleep 2 ;;
                    3) echo "Feature coming soon..."; sleep 2 ;;
                    4) break ;;
                    *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
                esac
            done
            ;;
            
        3) set_loop_delay ;;
        4) start_digging ;;
        5) 
            echo -e "${GREEN}Thank you for using DNS Digger!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option!${NC}"
            sleep 1
            ;;
    esac
done
