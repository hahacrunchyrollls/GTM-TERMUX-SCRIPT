#!/bin/bash
# TFN VPN DNS Keep-Alive Script
# Version 1.0
# Enhanced with menu interface

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
VER="1.0"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"

# Function to clear the screen and show the banner
show_banner() {
    clear
    echo -e "${BLUE}════════════════════════════════════════════${NC}"
    echo -e "${CYAN}           TFN VPN Keep-Alive Tool          ${NC}"
    echo -e "${CYAN}             Version: ${VER}                ${NC}"
    echo -e "${BLUE}════════════════════════════════════════════${NC}"
}

# Function to save configuration
save_config() {
    echo "NS=${NS[*]}" > "$CONFIG_FILE"
    echo "HOSTS=${HOSTS[*]}" >> "$CONFIG_FILE"
    echo "LOOP_DELAY=$LOOP_DELAY" >> "$CONFIG_FILE"
}

# Function to load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        IFS=' ' read -ra NS <<< "$NS"
        IFS=' ' read -ra HOSTS <<< "$HOSTS"
        return 0
    fi
    return 1
}

# Function to check dig command
check_dig() {
    if command -v dig >/dev/null 2>&1; then
        _DIG="$(command -v dig)"
        return 0
    elif [ -f "/data/data/com.termux/files/home/go/bin/fastdig" ]; then
        _DIG="/data/data/com.termux/files/home/go/bin/fastdig"
        return 0
    else
        echo -e "${RED}Error: 'dig' command not found. Please install dnsutils or configure fastdig.${NC}"
        return 1
    fi
}

# Function to add DNS
add_dns() {
    local dns
    read -p "Enter DNS to add: " dns
    HOSTS+=("$dns")
    save_config
    echo -e "${GREEN}DNS added successfully!${NC}"
    sleep 1
}

# Function to remove DNS
remove_dns() {
    local dns
    read -p "Enter DNS to remove: " dns
    HOSTS=("${HOSTS[@]/$dns}")
    save_config
    echo -e "${GREEN}DNS removed successfully!${NC}"
    sleep 1
}

# Function to remove all DNS
remove_all_dns() {
    HOSTS=()
    save_config
    echo -e "${GREEN}All DNS removed successfully!${NC}"
    sleep 1
}

# Function to add nameserver
add_nameserver() {
    local ns
    read -p "Enter nameserver to add: " ns
    NS+=("$ns")
    save_config
    echo -e "${GREEN}Nameserver added successfully!${NC}"
    sleep 1
}

# Function to remove nameserver
remove_nameserver() {
    local ns
    read -p "Enter nameserver to remove: " ns
    NS=("${NS[@]/$ns}")
    save_config
    echo -e "${GREEN}Nameserver removed successfully!${NC}"
    sleep 1
}

# Function to remove all nameservers
remove_all_nameservers() {
    NS=()
    save_config
    echo -e "${GREEN}All nameservers removed successfully!${NC}"
    sleep 1
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        read -p "Enter loop delay (0-5 seconds): " LOOP_DELAY
        if [[ ${LOOP_DELAY} =~ ^[0-5]$ ]]; then
            save_config
            echo -e "${GREEN}Loop delay set to ${LOOP_DELAY} seconds!${NC}"
            sleep 1
            break
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
        fi
    done
}

# Function to check DNS
check_dns() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS[@]}"; do
            T="${HOSTS[$i]}"
            START_TIME=$(date +%s%N)
            if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                STATUS="${GREEN}SUCCESS${NC}"
            else
                STATUS="${RED}FAILED${NC}"
            fi
            END_TIME=$(date +%s%N)
            PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
            echo -e "NS:${BLUE}${R}${NC} DNS:${CYAN}${T}${NC} Status:${STATUS} ${YELLOW}${PING_MS}ms${NC} Count:${DIG_COUNT}"
            DIG_COUNT=$((DIG_COUNT + 1))
        done
    done
}

# Function to start monitoring
start_monitoring() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        echo -e "${RED}Error: Please configure NS and DNS settings first.${NC}"
        sleep 2
        return
    fi
    
    clear
    echo -e "${YELLOW}Monitoring Started${NC}"
    echo -e "${CYAN}DNS List:${NC} ${HOSTS[*]}"
    echo -e "${CYAN}NS List:${NC} ${NS[*]}"
    echo -e "${CYAN}Loop Delay:${NC} ${LOOP_DELAY} seconds"
    echo -e "\n${YELLOW}Press Ctrl+C to stop monitoring${NC}\n"
    
    while true; do
        check_dns
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Main menu function
main_menu() {
    local choice
    while true; do
        show_banner
        echo -e "\n${CYAN}Main Menu:${NC}"
        echo "1. Add DNS"
        echo "2. Remove DNS"
        echo "3. Remove All DNS"
        echo "4. Add Nameserver"
        echo "5. Remove Nameserver"
        echo "6. Remove All Nameservers"
        echo "7. Set Loop Delay"
        echo "8. Start Digging"
        echo "9. Exit"
        echo
        read -p "Enter your choice (1-9): " choice
        
        case $choice in
            1) add_dns ;;
            2) remove_dns ;;
            3) remove_all_dns ;;
            4) add_nameserver ;;
            5) remove_nameserver ;;
            6) remove_all_nameservers ;;
            7) set_loop_delay ;;
            8) start_monitoring ;;
            9) echo -e "\n${GREEN}Thank you for using TFN VPN Keep-Alive Tool!${NC}"; exit 0 ;;
            *) echo -e "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}Cleaning up and exiting...${NC}"
    exit 1
}

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
