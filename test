#!/bin/bash
# Enhanced DNS Manager
# Version 2.1

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'
BOLD='\033[1m'

# Global variables
VER="2.1"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.dns_manager_config"
IS_LOOPING=false

# Function to create box drawing
draw_box() {
    local width=$1
    local title="$2"
    local padding=$(( (width - ${#title}) / 2 ))
    
    echo -e "${BLUE}╔═$(printf '═%.0s' $(seq 1 $(($width-2))))═╗${NC}"
    echo -e "${BLUE}║${NC}$(printf ' %.0s' $(seq 1 $padding))${CYAN}${title}${NC}$(printf ' %.0s' $(seq 1 $(($width - ${#title} - $padding - 1))))${BLUE}║${NC}"
    echo -e "${BLUE}╚═$(printf '═%.0s' $(seq 1 $(($width-2))))═╝${NC}"
}

# Enhanced banner
show_banner() {
    clear
    echo
    draw_box 50 "DNS Manager v${VER}"
    echo
}

# Function to set sleep time
set_sleep_time() {
    show_banner
    echo -e "${CYAN}${BOLD}Sleep Time Configuration${NC}\n"
    echo -e "Current sleep time: ${YELLOW}${LOOP_DELAY}${NC} seconds\n"
    
    while true; do
        read -p "Enter new sleep time (0-5 seconds): " new_delay
        if [[ "$new_delay" =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            save_config
            echo -e "\n${GREEN}Sleep time updated successfully!${NC}"
            sleep 1
            break
        else
            echo -e "\n${RED}Invalid input! Please enter a number between 0 and 5.${NC}"
        fi
    done
}

# Function to check DNS with loop
check_dns_loop() {
    show_banner
    echo -e "${CYAN}${BOLD}DNS Check Results${NC}\n"
    echo -e "${WHITE}Sleep Time:${NC} ${YELLOW}${LOOP_DELAY}${NC} seconds"
    echo -e "${WHITE}Press Ctrl+C to stop the loop${NC}\n"
    
    IS_LOOPING=true
    while $IS_LOOPING; do
        echo -e "${BLUE}$(date '+%Y-%m-%d %H:%M:%S')${NC}"
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        
        for ((i=0; i<"${#HOSTS[*]}"; i++)); do
            for R in "${NS[@]}"; do
                T="${HOSTS[$i]}"
                START_TIME=$(date +%s%N)
                if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                    STATUS="${GREEN}✓${NC}"
                else
                    STATUS="${RED}✗${NC}"
                fi
                END_TIME=$(date +%s%N)
                PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
                DIG_COUNT=$((DIG_COUNT + 1))
                echo -e "├─ ${WHITE}NS:${NC} ${BLUE}${R}${NC}"
                echo -e "│  └─ ${WHITE}DNS:${NC} ${CYAN}${T}${NC} ${STATUS} ${YELLOW}${PING_MS}ms${NC} Count: ${DIG_COUNT}"
            done
            echo -e "│"
        done
        
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        sleep $LOOP_DELAY
    done
}

# Function to check DNS once
check_dns_once() {
    show_banner
    echo -e "${CYAN}${BOLD}Single DNS Check${NC}\n"
    
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS[@]}"; do
            T="${HOSTS[$i]}"
            START_TIME=$(date +%s%N)
            if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                STATUS="${GREEN}✓${NC}"
            else
                STATUS="${RED}✗${NC}"
            fi
            END_TIME=$(date +%s%N)
            PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
            DIG_COUNT=$((DIG_COUNT + 1))
            echo -e "├─ ${WHITE}NS:${NC} ${BLUE}${R}${NC}"
            echo -e "│  └─ ${WHITE}DNS:${NC} ${CYAN}${T}${NC} ${STATUS} ${YELLOW}${PING_MS}ms${NC} Count: ${DIG_COUNT}"
        done
        echo -e "│"
    done
    
    echo -e "\n${YELLOW}Press Enter to continue...${NC}"
    read
}

# Function to check DNS with options
check_dns() {
    while true; do
        show_banner
        echo -e "${CYAN}${BOLD}DNS Check Options${NC}\n"
        display_menu_item "1" "Single DNS Check"
        display_menu_item "2" "Start DNS Check Loop"
        display_menu_item "3" "Set Sleep Time (Current: ${LOOP_DELAY}s)"
        display_menu_item "4" "Return to Main Menu"
        echo
        
        read -p "Enter your choice: " choice
        
        case $choice in
            1) check_dns_once ;;
            2) check_dns_loop ;;
            3) set_sleep_time ;;
            4) return ;;
            *) 
                echo -e "\n${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Cleanup function with loop handling
cleanup() {
    IS_LOOPING=false
    echo -e "\n${YELLOW}Cleaning up and exiting...${NC}"
    exit 1
}

# [Rest of the existing functions remain the same: manage_nameservers(), manage_dns(), save_config(), load_config(), check_dig(), etc.]

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
