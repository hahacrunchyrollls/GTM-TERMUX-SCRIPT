#!/bin/bash
## TFN VPN
## Script to keep-alive your DNSTT server domain record query from target resolver/local dns server
## Run this script excluded to your VPN tunnel (split vpn tunneling mode)

# Colors
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
MAGENTA='\e[1;35m'
CYAN='\e[1;36m'
NC='\e[0m' # No Color

# Variables
NS=''
declare -a HOSTS=('')
DIG_EXEC="DEFAULT"
CUSTOM_DIG=/data/data/com.termux/files/home/go/bin/fastdig
VER=0.1
LOOP_DELAY=1

# Function to clear screen and show header
show_header() {
    clear
    echo -e "${CYAN}═══════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}           DNSTT Keep-Alive Script v${VER}${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════${NC}"
}

# Function to show main menu
show_menu() {
    echo -e "\n${GREEN}Main Menu:${NC}"
    echo -e "${BLUE}1.${NC} Manage DNS"
    echo -e "${BLUE}2.${NC} Manage Nameserver"
    echo -e "${BLUE}3.${NC} Set Loop Delay"
    echo -e "${BLUE}4.${NC} Start Digging"
    echo -e "${BLUE}5.${NC} Exit"
    echo -e "${CYAN}───────────────────────────────────────────────${NC}"
}

# Function to show DNS submenu
show_dns_menu() {
    show_header
    echo -e "\n${GREEN}DNS Management Menu:${NC}"
    echo -e "${BLUE}1.${NC} Add DNS"
    echo -e "${BLUE}2.${NC} Remove DNS"
    echo -e "${BLUE}3.${NC} Remove All DNS"
    echo -e "${BLUE}4.${NC} Back to Main Menu"
    echo -e "${CYAN}───────────────────────────────────────────────${NC}"
}

# Function to show nameserver submenu
show_nameserver_menu() {
    show_header
    echo -e "\n${GREEN}Nameserver Management Menu:${NC}"
    echo -e "${BLUE}1.${NC} Add Nameserver"
    echo -e "${BLUE}2.${NC} Remove Nameserver"
    echo -e "${BLUE}3.${NC} Remove All Nameservers"
    echo -e "${BLUE}4.${NC} Back to Main Menu"
    echo -e "${CYAN}───────────────────────────────────────────────${NC}"
}

# Function to add DNS
add_dns() {
    echo -e "\n${YELLOW}Current DNS List: ${BLUE}${HOSTS[*]}${NC}"
    read -p "Enter new DNS to add: " new_dns
    if [[ -n "$new_dns" ]]; then
        HOSTS+=("$new_dns")
        echo -e "${GREEN}DNS added successfully!${NC}"
    fi
}

# Function to remove DNS
remove_dns() {
    echo -e "\n${YELLOW}Current DNS List:${NC}"
    for i in "${!HOSTS[@]}"; do
        echo -e "${BLUE}$i:${NC} ${HOSTS[$i]}"
    done
    read -p "Enter index number to remove: " index
    if [[ "$index" -ge 0 ]] && [[ "$index" -lt "${#HOSTS[@]}" ]]; then
        unset "HOSTS[$index]"
        HOSTS=("${HOSTS[@]}")
        echo -e "${GREEN}DNS removed successfully!${NC}"
    else
        echo -e "${RED}Invalid index!${NC}"
    fi
}

# Function to manage DNS
manage_dns() {
    while true; do
        show_dns_menu
        read -p "Enter your choice: " dns_choice
        case $dns_choice in
            1) add_dns ;;
            2) remove_dns ;;
            3) HOSTS=(''); echo -e "${GREEN}All DNS entries removed!${NC}" ;;
            4) return ;;
            *) echo -e "${RED}Invalid option!${NC}" ;;
        esac
        read -n 1 -s -r -p "Press any key to continue..."
    done
}

# Function to manage nameserver
manage_nameserver() {
    while true; do
        show_nameserver_menu
        read -p "Enter your choice: " ns_choice
        case $ns_choice in
            1) read -p "Enter new nameserver: " NS 
               echo -e "${GREEN}Nameserver added successfully!${NC}" ;;
            2) NS=''; echo -e "${GREEN}Nameserver removed!${NC}" ;;
            3) NS=''; echo -e "${GREEN}All nameservers removed!${NC}" ;;
            4) return ;;
            *) echo -e "${RED}Invalid option!${NC}" ;;
        esac
        read -n 1 -s -r -p "Press any key to continue..."
    done
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        echo -e "\n${YELLOW}Current loop delay: ${LOOP_DELAY}${NC}"
        read -p "Enter new loop delay (0-5 seconds): " new_delay
        if [[ $new_delay =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            break
        else
            echo -e "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
        fi
    done
}

# Function to check DNS
check() {
    case "${DIG_EXEC}" in
        DEFAULT|D)
            _DIG="$(command -v dig)"
            ;;
        CUSTOM|C)
            _DIG="${CUSTOM_DIG}"
            ;;
    esac
    
    if [ ! $(command -v ${_DIG}) ]; then
        echo -e "${RED}Dig command failed to run, please install dig(dnsutils) or check \$DIG_EXEC & \$CUSTOM_DIG variable.${NC}"
        return 1
    fi

    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS}"; do
            T="${HOSTS[$i]}"
            [[ -z $(timeout -k 3 3 ${_DIG} @${T} ${R}) ]] && M=31 || M=32;
            echo -e "\e[1;${M}m\$ NS:${R} DNS:${T}\e[0m"
        done
    done
    echo -e "${YELLOW}├───────────────TFN─VPN────────────────┤${NC}"
}

# Function to start digging
start_digging() {
    if [[ -z "$NS" ]]; then
        echo -e "${RED}Error: No nameserver configured!${NC}"
        return
    fi
    if [[ ${#HOSTS[@]} -eq 0 ]]; then
        echo -e "${RED}Error: No DNS hosts configured!${NC}"
        return
    }
    
    echo -e "\n${GREEN}Starting DNS dig...${NC}"
    echo -e "${BLUE}Press Ctrl+C to stop${NC}\n"
    
    while true; do
        check
        sleep ${LOOP_DELAY}
    done
}

# Main loop
while true; do
    show_header
    show_menu
    read -p "Enter your choice: " choice
    
    case $choice in
        1) manage_dns ;;
        2) manage_nameserver ;;
        3) set_loop_delay ;;
        4) start_digging ;;
        5) echo -e "${GREEN}Goodbye!${NC}"; exit 0 ;;
        *) echo -e "${RED}Invalid option!${NC}" ;;
    esac
    
    if [[ $choice != "4" ]]; then
        read -n 1 -s -r -p "Press any key to continue..."
    fi
done
