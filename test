#!/bin/bash
# Enhanced DNS Management Script for Termux
# Version 1.2

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Global variables
CONFIG_FILE="$HOME/.dns_config"
NAMESERVERS_FILE="$HOME/.nameservers"
DNS_FILE="$HOME/.dns_list"
LOOP_DELAY=0
DIG_COUNT=0

# Function to show banner
show_banner() {
    clear
    echo -e "${BLUE}╔══════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${CYAN}        DNS Management & Digging Tool      ${BLUE}║${NC}"
    echo -e "${BLUE}║${YELLOW}           Created for Termux             ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════╝${NC}"
}

# DNS Management Functions
manage_dns() {
    while true; do
        show_banner
        echo -e "\n${CYAN}DNS Management Menu:${NC}"
        echo -e "${WHITE}1.${NC} Add DNS"
        echo -e "${WHITE}2.${NC} Remove DNS"
        echo -e "${WHITE}3.${NC} Remove All DNS"
        echo -e "${WHITE}4.${NC} View Current DNS"
        echo -e "${WHITE}5.${NC} Back to Main Menu"
        echo
        read -p "Enter your choice (1-5): " dns_choice

        case $dns_choice in
            1)
                echo -e "\n${YELLOW}Enter DNS to add:${NC}"
                read dns_entry
                if [[ -n "$dns_entry" ]]; then
                    echo "$dns_entry" >> "$DNS_FILE"
                    echo -e "${GREEN}DNS added successfully!${NC}"
                else
                    echo -e "${RED}Invalid input! Please enter a valid DNS.${NC}"
                fi
                sleep 1
                ;;
            2)
                if [ -s "$DNS_FILE" ]; then
                    echo -e "\n${CYAN}Current DNS entries:${NC}"
                    nl -w2 -s". " "$DNS_FILE"
                    echo -e "\n${YELLOW}Enter line number to remove:${NC}"
                    read line_num
                    if [[ "$line_num" =~ ^[0-9]+$ ]]; then
                        sed -i "${line_num}d" "$DNS_FILE"
                        echo -e "${GREEN}DNS removed successfully!${NC}"
                    else
                        echo -e "${RED}Invalid input! Please enter a valid line number.${NC}"
                    fi
                else
                    echo -e "${RED}No DNS entries found!${NC}"
                fi
                sleep 1
                ;;
            3)
                echo -n > "$DNS_FILE"
                echo -e "${GREEN}All DNS entries removed!${NC}"
                sleep 1
                ;;
            4)
                echo -e "\n${CYAN}Current DNS entries:${NC}"
                if [ -s "$DNS_FILE" ]; then
                    nl -w2 -s". " "$DNS_FILE"
                else
                    echo -e "${RED}No DNS entries found!${NC}"
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            5) return ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Nameserver Management Functions
manage_nameserver() {
    while true; do
        show_banner
        echo -e "\n${CYAN}Nameserver Management Menu:${NC}"
        echo -e "${WHITE}1.${NC} Add Nameserver"
        echo -e "${WHITE}2.${NC} Remove Nameserver"
        echo -e "${WHITE}3.${NC} Remove All Nameservers"
        echo -e "${WHITE}4.${NC} View Current Nameservers"
        echo -e "${WHITE}5.${NC} Back to Main Menu"
        echo
        read -p "Enter your choice (1-5): " ns_choice

        case $ns_choice in
            1)
                echo -e "\n${YELLOW}Enter nameserver to add:${NC}"
                read ns_entry
                if [[ -n "$ns_entry" ]]; then
                    echo "$ns_entry" >> "$NAMESERVERS_FILE"
                    echo -e "${GREEN}Nameserver added successfully!${NC}"
                else
                    echo -e "${RED}Invalid input! Please enter a valid nameserver.${NC}"
                fi
                sleep 1
                ;;
            2)
                if [ -s "$NAMESERVERS_FILE" ]; then
                    echo -e "\n${CYAN}Current nameservers:${NC}"
                    nl -w2 -s". " "$NAMESERVERS_FILE"
                    echo -e "\n${YELLOW}Enter line number to remove:${NC}"
                    read line_num
                    if [[ "$line_num" =~ ^[0-9]+$ ]]; then
                        sed -i "${line_num}d" "$NAMESERVERS_FILE"
                        echo -e "${GREEN}Nameserver removed successfully!${NC}"
                    else
                        echo -e "${RED}Invalid input! Please enter a valid line number.${NC}"
                    fi
                else
                    echo -e "${RED}No nameservers found!${NC}"
                fi
                sleep 1
                ;;
            3)
                echo -n > "$NAMESERVERS_FILE"
                echo -e "${GREEN}All nameservers removed!${NC}"
                sleep 1
                ;;
            4)
                echo -e "\n${CYAN}Current nameservers:${NC}"
                if [ -s "$NAMESERVERS_FILE" ]; then
                    nl -w2 -s". " "$NAMESERVERS_FILE"
                else
                    echo -e "${RED}No nameservers found!${NC}"
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            5) return ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Set Loop Delay
set_loop_delay() {
    while true; do
        echo -e "\n${CYAN}Current loop delay:${NC} ${LOOP_DELAY} seconds"
        echo -e "${YELLOW}Enter new loop delay (0-5 seconds):${NC}"
        read new_delay
        if [[ "$new_delay" =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            echo "$LOOP_DELAY" > "$CONFIG_FILE"
            echo -e "${GREEN}Loop delay updated successfully!${NC}"
            sleep 1
            return
        else
            echo -e "${RED}Invalid input! Please enter a number between 0 and 5.${NC}"
            sleep 1
        fi
    done
}

# Start Digging Function
start_digging() {
    if [ ! -s "$DNS_FILE" ] || [ ! -s "$NAMESERVERS_FILE" ]; then
        echo -e "${RED}Error: Please configure DNS and nameservers first!${NC}"
        sleep 2
        return
    fi

    show_banner
    echo -e "\n${CYAN}Starting DNS dig process...${NC}"
    echo -e "${YELLOW}Press Ctrl+C to stop${NC}\n"

    # Reset DIG_COUNT
    DIG_COUNT=0

    while true; do
        while read -r dns; do
            while read -r nameserver; do
                START_TIME=$(date +%s%N)
                if dig @"$dns" "$nameserver" +time=2 > /dev/null 2>&1; then
                    STATUS="${GREEN}SUCCESS${NC}"
                else
                    STATUS="${RED}FAILED${NC}"
                fi
                END_TIME=$(date +%s%N)
                PING_MS=$(( (END_TIME - START_TIME) / 1000000 ))
                echo -e "DNS:${CYAN}${dns}${NC} NS:${BLUE}${nameserver}${NC} Status:${STATUS} ${YELLOW}${PING_MS}ms${NC} Count:${DIG_COUNT}"
                DIG_COUNT=$((DIG_COUNT + 1))
            done < "$NAMESERVERS_FILE"
        done < "$DNS_FILE"
        echo -e "${BLUE}────────────────────────────────────────${NC}"
        [ "$LOOP_DELAY" -gt 0 ] && sleep "$LOOP_DELAY"
    done
}

# Initialize files
touch "$CONFIG_FILE" "$NAMESERVERS_FILE" "$DNS_FILE"
[ -s "$CONFIG_FILE" ] && LOOP_DELAY=$(cat "$CONFIG_FILE")

# Main Menu
while true; do
    show_banner
    echo -e "\n${CYAN}Main Menu:${NC}"
    echo -e "${WHITE}1.${NC} DNS Management"
    echo -e "${WHITE}2.${NC} Nameserver Management"
    echo -e "${WHITE}3.${NC} Set Loop Delay (Current: ${LOOP_DELAY}s)"
    echo -e "${WHITE}4.${NC} Start Digging"
    echo -e "${WHITE}5.${NC} Exit"
    echo
    read -p "Enter your choice (1-5): " choice

    case $choice in
        1) manage_dns ;;
        2) manage_nameserver ;;
        3) set_loop_delay ;;
        4) start_digging ;;
        5) 
            echo -e "\n${GREEN}Thank you for using DNS Management Tool!${NC}"
            exit 0
            ;;
        *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
    esac
done
