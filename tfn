#!/bin/bash
# TFN VPN DNS Script
# Version 3.0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
VER="3.0"
DIG_COUNT=0
NS=()
HOSTS=()
LOOP_DELAY=0
CONFIG_FILE="$HOME/.tfn_vpn_config"
LOG_FILE="$HOME/tfn_vpn_dns.log"
NS_FILE="$HOME/.tfn_vpn_ns"
HOSTS_FILE="$HOME/.tfn_vpn_hosts"

# Function to log messages
log() {
    echo -e "$1" | tee -a "$LOG_FILE"
}

# Function to clear screen and show banner
show_banner() {
    clear
    log "${GREEN}╔══════════════════════════════════════════════╗${NC}"
    log "${GREEN}        TFN VPN DNS Script                    ${NC}"
    log "${GREEN}          Version: ${VER}                     ${NC}"
    log "${GREEN}╚══════════════════════════════════════════════╝${NC}"
}

# Function to save configuration
save_config() {
    printf "%s\n" "${NS[@]}" > "$NS_FILE"
    printf "%s\n" "${HOSTS[@]}" > "$HOSTS_FILE"
    echo "LOOP_DELAY=$LOOP_DELAY" > "$CONFIG_FILE"
}

# Function to load configuration
load_config() {
    if [ -f "$NS_FILE" ]; then
        mapfile -t NS < "$NS_FILE"
    fi
    if [ -f "$HOSTS_FILE" ]; then
        mapfile -t HOSTS < "$HOSTS_FILE"
    fi
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# DNS Management Menu
dns_menu() {
    local choice
    while true; do
        show_banner
        log "\n${CYAN}DNS Management Menu:${NC}"
        log "${GREEN}╔══════════════════════════════════════════════╗${NC}"
        log "${GREEN} 1. Add DNS            ${NC}"
        log "${GREEN} 2. Remove DNS         ${NC}"
        log "${GREEN} 3. View Current DNS   ${NC}"
        log "${GREEN} 0. Back to Main Menu  ${NC}"
        log "${GREEN}╚══════════════════════════════════════════════╝${NC}"
        log ""
        read -p "Enter your choice (1-4): " choice

        case $choice in
            1)  clear
                read -p "Enter DNS to add: " dns
                HOSTS+=("$dns")
                save_config
                log "${GREEN}DNS added successfully!${NC}"
                sleep 1
                ;;
            2)  if [ ${#HOSTS[@]} -eq 0 ]; then
                    log "${RED}No DNS entries to remove!${NC}"
                else
                    log "\n${CYAN}Current DNS entries:${NC}"
                    for i in "${!HOSTS[@]}"; do
                        log "$((i+1)). ${HOSTS[$i]}"
                    done
                    read -p "Enter number to remove: " num
                    if [[ $num =~ ^[0-9]+$ ]] && [ $num -le ${#HOSTS[@]} ] && [ $num -gt 0 ]; then
                        unset 'HOSTS[$((num-1))]'
                        HOSTS=("${HOSTS[@]}")
                        save_config
                        log "${GREEN}DNS removed successfully!${NC}"
                    else
                        log "${RED}Invalid selection!${NC}"
                    fi
                fi
                sleep 1
                ;;
            3)  log "\n${CYAN}Current DNS entries:${NC}"
                if [ ${#HOSTS[@]} -eq 0 ]; then
                    log "${YELLOW}No DNS configured${NC}"
                else
                    for i in "${!HOSTS[@]}"; do
                        log "$((i+1)). ${HOSTS[$i]}"
                    done
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            0)  return ;;
            *)  log "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Nameserver Management Menu
nameserver_menu() {
    local choice
    while true; do
        show_banner
        log "\n${CYAN}Nameserver Management Menu:${NC}"
        log "${GREEN}╔══════════════════════════════════════════════╗${NC}"
        log "${GREEN} 1. Add NS         ${NC}"
        log "${GREEN} 2. Remove NS      ${NC}"
        log "${GREEN} 3. View Current NS${NC}"
        log "${GREEN} 0. Back to Main Menu${NC}"
        log "${GREEN}╚══════════════════════════════════════════════╝${NC}"
        log ""
        read -p "Enter your choice (1-4): " choice

        case $choice in
            1)  clear
                read -p "Enter nameserver to add: " ns
                NS+=("$ns")
                save_config
                log "${GREEN}Nameserver added successfully!${NC}"
                sleep 1
                ;;
            2)  if [ ${#NS[@]} -eq 0 ]; then
                    log "${RED}No nameservers to remove!${NC}"
                else
                    log "\n${CYAN}Current nameservers:${NC}"
                    for i in "${!NS[@]}"; do
                        log "$((i+1)). ${NS[$i]}"
                    done
                    read -p "Enter number to remove: " num
                    if [[ $num =~ ^[0-9]+$ ]] && [ $num -le ${#NS[@]} ] && [ $num -gt 0 ]; then
                        unset 'NS[$((num-1))]'
                        NS=("${NS[@]}")
                        save_config
                        log "${GREEN}Nameserver removed successfully!${NC}"
                    else
                        log "${RED}Invalid selection!${NC}"
                    fi
                fi
                sleep 1
                ;;
            3)  log "\n${CYAN}Current nameservers:${NC}"
                if [ ${#NS[@]} -eq 0 ]; then
                    log "${YELLOW}No nameservers configured${NC}"
                else
                    for i in "${!NS[@]}"; do
                        log "$((i+1)). ${NS[$i]}"
                    done
                fi
                read -n 1 -s -r -p "Press any key to continue..."
                ;;
            0)  return ;;
            *)  log "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Function to set loop delay
set_loop_delay() {
    while true; do
        show_banner
        log "\n${CYAN}Current loop delay:${NC} ${LOOP_DELAY} seconds"
        read -p "Enter new loop delay (0-5 seconds): " new_delay
        if [[ $new_delay =~ ^[0-5]$ ]]; then
            LOOP_DELAY=$new_delay
            save_config
            log "${GREEN}Loop delay updated successfully!${NC}"
            sleep 1
            return
        else
            log "${RED}Invalid input. Please enter a number between 0 and 5.${NC}"
            sleep 1
        fi
    done
}

# Function to check dig command
check_dig() {
    if command -v dig >/dev/null 2>&1; then
        _DIG="$(command -v dig)"
        return 0
    elif [ -f "/data/data/com.termux/files/home/go/bin/fastdig" ]; then
        _DIG="/data/data/com.termux/files/home/go/bin/fastdig"
        return 0
    else
        log "${RED}Error: 'dig' command not found. Please install dnsutils or configure fastdig.${NC}"
        return 1
    fi
}

# Function to check DNS
check_dns() {
    for ((i=0; i<"${#HOSTS[*]}"; i++)); do
        for R in "${NS[@]}"; do
            T="${HOSTS[$i]}"
            if timeout -k 3 3 ${_DIG} @${T} ${R} >/dev/null 2>&1; then
                STATUS="${GREEN}✔${NC}"
            else
                STATUS="${RED}✘${NC}"
            fi
            log "NS: ${GREEN}${R}${NC}\nDNS: ${CYAN}${T}${NC}\nSTATUS: ${STATUS}\nCount: ${DIG_COUNT}"
            DIG_COUNT=$((DIG_COUNT + 1))
        done
    done
}

# Function to start digging
start_digging() {
    if [ ${#NS[@]} -eq 0 ] || [ ${#HOSTS[@]} -eq 0 ]; then
        log "${RED}Error: Please configure both DNS and nameserver settings first.${NC}"
        sleep 2
        return
    fi

    clear
    log "${YELLOW}Digging Started${NC}"
    log "${CYAN}DNS List:${NC} ${HOSTS[*]}"
    log "${CYAN}NS List:${NC} ${NS[*]}"
    log "${CYAN}Loop Delay:${NC} ${LOOP_DELAY} seconds"
    log "\n${YELLOW}Press Ctrl+C to stop digging${NC}\n"

    while true; do
        check_dns
        log "${GREEN}──────────────────────────────────────────────${NC}"
        if [ ${LOOP_DELAY} -gt 0 ]; then
            sleep ${LOOP_DELAY}
        fi
    done
}

# Main menu function
main_menu() {
    local choice
    while true; do
        show_banner
        log "\n${CYAN}        Main Menu:${NC}"
        log "${GREEN}╔══════════════════════════════════════════════╗${NC}"
        log "${GREEN} 1. DNS Management      ${NC}"
        log "${GREEN} 2. NS Management       ${NC}"
        log "${GREEN} 3. Set Loop Delay      ${NC}"
        log "${GREEN} 4. Start Digging       ${NC}"
        log "${GREEN} 0. Exit                ${NC}"
        log "${GREEN}╚══════════════════════════════════════════════╝${NC}"
        log ""
        read -p "Enter your choice (1-5): " choice

        case $choice in
            1) dns_menu ;;
            2) nameserver_menu ;;
            3) set_loop_delay ;;
            4) start_digging ;;
            0) log "\n${GREEN}Thank you for using TFN VPN DNS Script!${NC}"; exit 0 ;;
            *) log "${RED}Invalid option. Please try again.${NC}"; sleep 1 ;;
        esac
    done
}

# Cleanup function
cleanup() {
    log "\n${YELLOW}Cleaning up and exiting...${NC}"
    exit 1
}

# Set up trap for cleanup
trap cleanup 2 15

# Initial setup
check_dig || exit 1
load_config

# Start the program
main_menu
